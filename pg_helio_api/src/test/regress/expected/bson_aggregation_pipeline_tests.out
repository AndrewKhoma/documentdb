SET search_path TO helio_api,helio_core,helio_api_catalog;
SET helio_api.next_collection_id TO 3500;
SET helio_api.next_collection_index_id TO 3500;
SELECT helio_api.insert_one('db','aggregation_pipeline','{"_id":"1", "int": 10, "a" : { "b" : [ "x", 1, 2.0, true ] } }', NULL);
NOTICE:  creating collection
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','aggregation_pipeline','{"_id":"2", "double": 2.0, "a" : { "b" : {"c": 3} } }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','aggregation_pipeline','{"_id":"3", "boolean": false, "a" : "no", "b": "yes", "c": true }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- fetch all rows
SELECT document FROM helio_api.collection('db', 'aggregation_pipeline') ORDER BY bson_get_value(document, '_id');
                                                               document                                                               
--------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true }
(3 rows)

-- add newField
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } } ], "cursor": {} }');
                                                                                  document                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ], "y" : [ "p", "q" ] }, "newField" : "1" }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } }, "y" : [ "p", "q" ] }, "newField" : "1" }
 { "_id" : "3", "boolean" : false, "b" : "yes", "c" : true, "newField" : "1", "a" : { "y" : [ "p", "q" ] } }
(3 rows)

-- do 2 addFields
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } }, { "$addFields": { "newField2": "someOtherField" } } ], "cursor": {} }');
                                                                                                  document                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ], "y" : [ "p", "q" ] }, "newField" : "1", "newField2" : "someOtherField" }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } }, "y" : [ "p", "q" ] }, "newField" : "1", "newField2" : "someOtherField" }
 { "_id" : "3", "boolean" : false, "b" : "yes", "c" : true, "newField" : "1", "a" : { "y" : [ "p", "q" ] }, "newField2" : "someOtherField" }
(3 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } }, { "$set": { "newField2": "someOtherField" } } ], "cursor": {} }');
                                                                                                  document                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ], "y" : [ "p", "q" ] }, "newField" : "1", "newField2" : "someOtherField" }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } }, "y" : [ "p", "q" ] }, "newField" : "1", "newField2" : "someOtherField" }
 { "_id" : "3", "boolean" : false, "b" : "yes", "c" : true, "newField" : "1", "a" : { "y" : [ "p", "q" ] }, "newField2" : "someOtherField" }
(3 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } }, { "$addFields": { "newField2": "someOtherField" } } ], "cursor": {} }');
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on helio_data.documents_3500 collection
   Output: bson_dollar_add_fields(bson_dollar_add_fields(collection.document, '{ "newField" : "1", "a.y" : [ "p", "q" ] }'::bson), '{ "newField2" : "someOtherField" }'::bson)
   Recheck Cond: (collection.shard_key_value = '3500'::bigint)
   ->  Bitmap Index Scan on _id_
         Index Cond: (collection.shard_key_value = '3500'::bigint)
(5 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } }, { "$set": { "newField2": "someOtherField" } } ], "cursor": {} }');
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on helio_data.documents_3500 collection
   Output: bson_dollar_add_fields(bson_dollar_add_fields(collection.document, '{ "newField" : "1", "a.y" : [ "p", "q" ] }'::bson), '{ "newField2" : "someOtherField" }'::bson)
   Recheck Cond: (collection.shard_key_value = '3500'::bigint)
   ->  Bitmap Index Scan on _id_
         Index Cond: (collection.shard_key_value = '3500'::bigint)
(5 rows)

-- add $project
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } } ], "cursor": {} }');
                                              document                                               
-----------------------------------------------------------------------------------------------------
 { "_id" : "1", "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
 { "_id" : "2", "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3" }
(3 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$set": { "newField2": "someOtherField" } }], "cursor": {} }');
                                                                                             QUERY PLAN                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on helio_data.documents_3500 collection
   Output: bson_dollar_add_fields(bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson), '{ "newField2" : "someOtherField" }'::bson)
   Recheck Cond: (collection.shard_key_value = '3500'::bigint)
   ->  Bitmap Index Scan on _id_
         Index Cond: (collection.shard_key_value = '3500'::bigint)
(5 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$set": { "newField2": "someOtherField" } }], "cursor": {} }');
                                                              document                                                               
-------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] }, "newField2" : "someOtherField" }
 { "_id" : "2", "a" : { "b" : { "c" : { "$numberInt" : "3" } } }, "newField2" : "someOtherField" }
 { "_id" : "3", "newField2" : "someOtherField" }
(3 rows)

-- add $unset
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$unset": "_id" }, { "$set": { "newField2": "someOtherField" } }], "cursor": {} }');
                                                                        document                                                                         
---------------------------------------------------------------------------------------------------------------------------------------------------------
 { "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] }, "newField2" : "someOtherField" }
 { "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } }, "newField2" : "someOtherField" }
 { "boolean" : false, "a" : "no", "b" : "yes", "c" : true, "newField2" : "someOtherField" }
(3 rows)

-- add skip
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$skip": 1 }], "cursor": {} }');
                             document                              
-------------------------------------------------------------------
 { "_id" : "2", "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3" }
(2 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$skip": 1 }], "cursor": {} }');
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson))
   ->  Bitmap Heap Scan on helio_data.documents_3500 collection
         Output: bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson)
         Recheck Cond: (collection.shard_key_value = '3500'::bigint)
         ->  Bitmap Index Scan on _id_
               Index Cond: (collection.shard_key_value = '3500'::bigint)
(7 rows)

-- add limit
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$limit": 1 }], "cursor": {} }');
                                              document                                               
-----------------------------------------------------------------------------------------------------
 { "_id" : "1", "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$limit": 1 }], "cursor": {} }');
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson))
   ->  Seq Scan on helio_data.documents_3500 collection
         Output: bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson)
(4 rows)

-- add skip + limit
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$limit": 1 }, { "$skip": 1 }], "cursor": {} }');
 document 
----------
(0 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$limit": 1 }, { "$skip": 1 }], "cursor": {} }');
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson))
   ->  Limit
         Output: (bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson))
         ->  Seq Scan on helio_data.documents_3500 collection
               Output: bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson)
(6 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$skip": 1 }, { "$limit": 1 }], "cursor": {} }');
                             document                              
-------------------------------------------------------------------
 { "_id" : "2", "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$skip": 1 }, { "$limit": 1 }], "cursor": {} }');
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson))
   ->  Limit
         Output: (bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson))
         ->  Bitmap Heap Scan on helio_data.documents_3500 collection
               Output: bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson)
               Recheck Cond: (collection.shard_key_value = '3500'::bigint)
               ->  Bitmap Index Scan on _id_
                     Index Cond: (collection.shard_key_value = '3500'::bigint)
(9 rows)

-- try match
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }], "cursor": {} }');
                                                 document                                                  
-----------------------------------------------------------------------------------------------------------
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true }
(2 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }], "cursor": {} }');
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Index Scan using _id_ on helio_data.documents_3500 collection
   Output: collection.document
   Index Cond: ((collection.shard_key_value = '3500'::bigint) AND (collection.object_id > '{ "" : "1" }'::bson))
   Filter: (collection.document @> '{ "_id" : "1" }'::bson)
(4 rows)

-- match + project
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }, { "$project": { "a.b": 1 } }], "cursor": {} }');
                             document                              
-------------------------------------------------------------------
 { "_id" : "2", "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3" }
(2 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }, { "$project": { "a.b": 1 } }], "cursor": {} }');
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Index Scan using _id_ on helio_data.documents_3500 collection
   Output: bson_dollar_project(collection.document, '{ "a.b" : { "$numberInt" : "1" } }'::bson)
   Index Cond: ((collection.shard_key_value = '3500'::bigint) AND (collection.object_id > '{ "" : "1" }'::bson))
   Filter: (collection.document @> '{ "_id" : "1" }'::bson)
(4 rows)

-- match + project + match
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }, { "$project": { "a.b": 1, "c": "$_id", "_id": 0 } }, { "$match": { "c": { "$gt": "2" } } }], "cursor": {} }');
   document    
---------------
 { "c" : "3" }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }, { "$project": { "a.b": 1, "c": "$_id", "_id": 0 } }, { "$match": { "c": { "$gt": "2" } } }], "cursor": {} }');
                                                                                                           QUERY PLAN                                                                                                           
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using _id_ on helio_data.documents_3500 collection
   Output: bson_dollar_project(collection.document, '{ "a.b" : { "$numberInt" : "1" }, "c" : "$_id", "_id" : { "$numberInt" : "0" } }'::bson)
   Index Cond: ((collection.shard_key_value = '3500'::bigint) AND (collection.object_id > '{ "" : "1" }'::bson))
   Filter: ((collection.document @> '{ "_id" : "1" }'::bson) AND (bson_dollar_project(collection.document, '{ "a.b" : { "$numberInt" : "1" }, "c" : "$_id", "_id" : { "$numberInt" : "0" } }'::bson) @> '{ "c" : "2" }'::bson))
(4 rows)

-- unwind
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$unwind": "$a.b" } ], "cursor": {} }');
                                                 document                                                  
-----------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : "x" } }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberInt" : "1" } } }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberDouble" : "2.0" } } }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : true } }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
(5 rows)

-- match and then unwind
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }, { "$unwind": "$a.b" } ], "cursor": {} }');
                                                 document                                                  
-----------------------------------------------------------------------------------------------------------
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
(1 row)

-- unwind and then match
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$unwind": "$a.b" }, { "$match": { "$expr": { "$not": { "$isArray": "$a.b" } } } } ], "cursor": {} }');
                                                 document                                                  
-----------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : "x" } }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberInt" : "1" } } }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberDouble" : "2.0" } } }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : true } }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
(5 rows)

-- unwind and addfields
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$unwind": "$a.b" }, { "$addFields": { "xyz": "$_id" } } ], "cursor": {} }');
                                                        document                                                        
------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : "x" }, "xyz" : "1" }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberInt" : "1" } }, "xyz" : "1" }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberDouble" : "2.0" } }, "xyz" : "1" }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : true }, "xyz" : "1" }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } }, "xyz" : "2" }
(5 rows)

-- $addFields then addFields is inlined.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "x": 1, "y": 2, "xyz": 3 } }, { "$addFields": { "xyz": "$_id" } } ], "cursor": {} }');
                                                                                                   document                                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] }, "x" : { "$numberInt" : "1" }, "y" : { "$numberInt" : "2" }, "xyz" : "1" }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } }, "x" : { "$numberInt" : "1" }, "y" : { "$numberInt" : "2" }, "xyz" : "2" }
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true, "x" : { "$numberInt" : "1" }, "y" : { "$numberInt" : "2" }, "xyz" : "3" }
(3 rows)

EXPLAIN (COSTS OFF, VERBOSE ON ) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "x": 1, "y": 2, "xyz": 3 } }, { "$addFields": { "xyz": "$_id" } } ], "cursor": {} }');
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on helio_data.documents_3500 collection
   Output: bson_dollar_add_fields(bson_dollar_add_fields(collection.document, '{ "x" : { "$numberInt" : "1" }, "y" : { "$numberInt" : "2" }, "xyz" : { "$numberInt" : "3" } }'::bson), '{ "xyz" : "$_id" }'::bson)
   Recheck Cond: (collection.shard_key_value = '3500'::bigint)
   ->  Bitmap Index Scan on _id_
         Index Cond: (collection.shard_key_value = '3500'::bigint)
(5 rows)

-- $project then addFields can be inlined only on exclusion today
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "a": 0, "boolean": 0 } }, { "$addFields": { "a": 1, "xyz": "$_id" } } ], "cursor": {} }');
                                              document                                              
----------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "$numberInt" : "1" }, "xyz" : "1" }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "$numberInt" : "1" }, "xyz" : "2" }
 { "_id" : "3", "a" : { "$numberInt" : "1" }, "b" : "yes", "c" : true, "xyz" : "3" }
(3 rows)

EXPLAIN (COSTS OFF, VERBOSE ON ) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "a": 0, "boolean": 0 } }, { "$addFields": { "a": 1, "xyz": "$_id" } } ], "cursor": {} }');
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on helio_data.documents_3500 collection
   Output: bson_dollar_add_fields(collection.document, '{ "a" : { "$numberInt" : "1" }, "xyz" : "$_id", "boolean" : "$$REMOVE" }'::bson)
   Recheck Cond: (collection.shard_key_value = '3500'::bigint)
   ->  Bitmap Index Scan on _id_
         Index Cond: (collection.shard_key_value = '3500'::bigint)
(5 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "a": 0, "boolean": 1 } }, { "$addFields": { "a": 1, "xyz": "$_id" } } ], "cursor": {} }');
ERROR:  Cannot do exclusion on field boolean in inclusion projection.
-- replaceRoot
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "e": {  "f": "$a.b" } } }, { "$replaceRoot": { "newRoot": "$e" } } ], "cursor": {} }');
                                   document                                   
------------------------------------------------------------------------------
 { "f" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] }
 { "f" : { "c" : { "$numberInt" : "3" } } }
 { }
(3 rows)

-- count
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$count": "d" }], "cursor": {} }');
             document             
----------------------------------
 { "d" : { "$numberInt" : "3" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$unwind": "$a.b" }, { "$count": "d" }, { "$addFields": { "e": "$d" } }], "cursor": {} }');
                            document                            
----------------------------------------------------------------
 { "d" : { "$numberInt" : "5" }, "e" : { "$numberInt" : "5" } }
(1 row)

-- replaceWith
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "e": {  "f": "$a.b" } } }, { "$replaceWith": "$e" } ], "cursor": {} }');
                                   document                                   
------------------------------------------------------------------------------
 { "f" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] }
 { "f" : { "c" : { "$numberInt" : "3" } } }
 { }
(3 rows)

-- sort
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$sort": { "_id": 1 } }], "cursor": {} }');
                                                               document                                                               
--------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true }
(3 rows)

-- sort + match
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$sort": { "_id": 1 } }, { "$match": { "_id": { "$gt": "1" } } } ], "cursor": {} }');
                                                 document                                                  
-----------------------------------------------------------------------------------------------------------
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true }
(2 rows)

-- match + sort
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }, { "$sort": { "_id": 1 } } ], "cursor": {} }');
                                                 document                                                  
-----------------------------------------------------------------------------------------------------------
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true }
(2 rows)

-- sortByCount
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$sortByCount": { "$eq": [ { "$mod": [ { "$toInt": "$_id" }, 2 ] }, 0  ] } }, { "$sort": { "_id": 1 } }], "cursor": {} }');
                      document                       
-----------------------------------------------------
 { "_id" : false, "count" : { "$numberInt" : "2" } }
 { "_id" : true, "count" : { "$numberInt" : "1" } }
(2 rows)

-- $group
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$group": { "_id": { "$mod": [ { "$toInt": "$_id" }, 2 ] }, "d": { "$max": "$_id" }, "e": { "$count": 1 } } }], "cursor": {} }');
                                  document                                   
-----------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "0" }, "d" : "2", "e" : { "$numberInt" : "1" } }
 { "_id" : { "$numberInt" : "1" }, "d" : "3", "e" : { "$numberInt" : "2" } }
(2 rows)

-- $group with first/last
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$group": { "_id": { "$mod": [ { "$toInt": "$_id" }, 2 ] }, "d": { "$first": "$_id" }, "e": { "$last":  "$_id" } } }], "cursor": {} }');
                         document                         
----------------------------------------------------------
 { "_id" : { "$numberInt" : "0" }, "d" : "2", "e" : "2" }
 { "_id" : { "$numberInt" : "1" }, "d" : "1", "e" : "3" }
(2 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$group": { "_id": { "$mod": [ { "$toInt": "$_id" }, 2 ] }, "d": { "$first": "$_id" }, "e": { "$last":  "$_id" } } }], "cursor": {} }');
                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on agg_stage_0
   Output: bson_repath_and_build(agg_stage_0.c1, agg_stage_0.c2, agg_stage_0.c3, agg_stage_0.c4, agg_stage_0.c5, agg_stage_0.c6)
   ->  GroupAggregate
         Output: '_id'::text, (bson_expression_get(collection.document, '{ "" : { "$mod" : [ { "$toInt" : "$_id" }, { "$numberInt" : "2" } ] } }'::bson, true)), 'd'::text, bsonfirstonsorted(bson_expression_get(collection.document, '{ "" : "$_id" }'::bson, true)), 'e'::text, bsonlastonsorted(bson_expression_get(collection.document, '{ "" : "$_id" }'::bson, true))
         Group Key: (bson_expression_get(collection.document, '{ "" : { "$mod" : [ { "$toInt" : "$_id" }, { "$numberInt" : "2" } ] } }'::bson, true))
         ->  Sort
               Output: (bson_expression_get(collection.document, '{ "" : { "$mod" : [ { "$toInt" : "$_id" }, { "$numberInt" : "2" } ] } }'::bson, true)), collection.document
               Sort Key: (bson_expression_get(collection.document, '{ "" : { "$mod" : [ { "$toInt" : "$_id" }, { "$numberInt" : "2" } ] } }'::bson, true))
               ->  Bitmap Heap Scan on helio_data.documents_3500 collection
                     Output: bson_expression_get(collection.document, '{ "" : { "$mod" : [ { "$toInt" : "$_id" }, { "$numberInt" : "2" } ] } }'::bson, true), collection.document
                     Recheck Cond: (collection.shard_key_value = '3500'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (collection.shard_key_value = '3500'::bigint)
(13 rows)

-- $group with first/last sorted (TODO)
-- add $sample
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$sample": { "size": 2 } }, { "$project": { "_id": "1" } } ], "cursor": {} }');
    document     
-----------------
 { "_id" : "1" }
 { "_id" : "1" }
(2 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$sample": { "size": 2 } }, { "$project": { "_id": "1" } } ], "cursor": {} }');
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Subquery Scan on agg_stage_1
   Output: bson_dollar_project(agg_stage_1.document, '{ "_id" : "1" }'::bson)
   ->  Limit
         Output: collection.document, (random())
         ->  Sort
               Output: collection.document, (random())
               Sort Key: (random())
               ->  Sample Scan on helio_data.documents_3500 collection
                     Output: collection.document, random()
                     Sampling: system_rows ('2'::bigint)
(10 rows)

-- Sample after pass-through stages
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id": "1" } }, { "$sample": { "size": 2 } }], "cursor": {} }');
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Subquery Scan on "topQuery_stage_0"
   Output: "topQuery_stage_0".document
   ->  Limit
         Output: (bson_dollar_project(collection.document, '{ "_id" : "1" }'::bson)), (random())
         ->  Sort
               Output: (bson_dollar_project(collection.document, '{ "_id" : "1" }'::bson)), (random())
               Sort Key: (random())
               ->  Sample Scan on helio_data.documents_3500 collection
                     Output: bson_dollar_project(collection.document, '{ "_id" : "1" }'::bson), random()
                     Sampling: system_rows ('2'::bigint)
(10 rows)

-- Sample after sample
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$sample": { "size": 3 } }, { "$sample": { "size": 2 } }], "cursor": {} }');
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Subquery Scan on "topQuery_stage_0"
   Output: "topQuery_stage_0".document
   ->  Limit
         Output: agg_stage_1.document, (random())
         ->  Sort
               Output: agg_stage_1.document, (random())
               Sort Key: (random())
               ->  Subquery Scan on agg_stage_1
                     Output: agg_stage_1.document, random()
                     ->  Limit
                           Output: collection.document, (random())
                           ->  Sort
                                 Output: collection.document, (random())
                                 Sort Key: (random())
                                 ->  Sample Scan on helio_data.documents_3500 collection
                                       Output: collection.document, random()
                                       Sampling: system_rows ('3'::bigint)
(17 rows)

-- Sample after other stage
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$unwind": "$a.b" }, { "$sample": { "size": 2 } }], "cursor": {} }');
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on "topQuery_stage_0"
   Output: "topQuery_stage_0".document
   ->  Limit
         Output: agg_stage_1.document, (random())
         ->  Sort
               Output: agg_stage_1.document, (random())
               Sort Key: (random())
               ->  Subquery Scan on agg_stage_1
                     Output: agg_stage_1.document, random()
                     ->  ProjectSet
                           Output: bson_dollar_unwind(collection.document, '$a.b'::text)
                           ->  Bitmap Heap Scan on helio_data.documents_3500 collection
                                 Output: collection.shard_key_value, collection.object_id, collection.document, collection.creation_time
                                 Recheck Cond: (collection.shard_key_value = '3500'::bigint)
                                 ->  Bitmap Index Scan on _id_
                                       Index Cond: (collection.shard_key_value = '3500'::bigint)
(16 rows)

-- internalInhibitOptimization
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } }, { "$_internalInhibitOptimization": 1 }, { "$addFields": { "newField2": "someOtherField" } } ], "cursor": {} }');
                                                                                                  document                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ], "y" : [ "p", "q" ] }, "newField" : "1", "newField2" : "someOtherField" }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } }, "y" : [ "p", "q" ] }, "newField" : "1", "newField2" : "someOtherField" }
 { "_id" : "3", "boolean" : false, "b" : "yes", "c" : true, "newField" : "1", "a" : { "y" : [ "p", "q" ] }, "newField2" : "someOtherField" }
(3 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } }, { "$_internalInhibitOptimization": 1 }, { "$addFields": { "newField2": "someOtherField" } } ], "cursor": {} }');
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 CTE Scan on internalinhibitoptimization inhibit_stage_1
   Output: bson_dollar_add_fields(inhibit_stage_1.document, '{ "newField2" : "someOtherField" }'::bson)
   CTE internalinhibitoptimization
     ->  Bitmap Heap Scan on helio_data.documents_3500 collection
           Output: bson_dollar_add_fields(collection.document, '{ "newField" : "1", "a.y" : [ "p", "q" ] }'::bson)
           Recheck Cond: (collection.shard_key_value = '3500'::bigint)
           ->  Bitmap Index Scan on _id_
                 Index Cond: (collection.shard_key_value = '3500'::bigint)
(8 rows)

-- facet
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$facet": { "a" : [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } } ] } } ], "cursor": {} }');
                                                                                                                                                                                                                        document                                                                                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "a" : [ { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ], "y" : [ "p", "q" ] }, "newField" : "1" }, { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } }, "y" : [ "p", "q" ] }, "newField" : "1" }, { "_id" : "3", "boolean" : false, "b" : "yes", "c" : true, "newField" : "1", "a" : { "y" : [ "p", "q" ] } } ] }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$facet": { "a" : [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } } ],  "b" : [ { "$count": "c" } ] } } ], "cursor": {} }');
                                                                                                                                                                                                                                              document                                                                                                                                                                                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "a" : [ { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ], "y" : [ "p", "q" ] }, "newField" : "1" }, { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } }, "y" : [ "p", "q" ] }, "newField" : "1" }, { "_id" : "3", "boolean" : false, "b" : "yes", "c" : true, "newField" : "1", "a" : { "y" : [ "p", "q" ] } } ], "b" : [ { "c" : { "$numberInt" : "3" } } ] }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$facet": { "a" : [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } } ],  "b" : [ { "$count": "d" } ], "c": [ { "$unwind": "$a.b" } ] } } ], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            document                                                                                                                                                                                                                                                                                                                                                                                                                                                                             

 { "a" : [ { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ], "y" : [ "p", "q" ] }, "newField" : "1" }, { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } }, "y" : [ "p", "q" ] }, "newField" : "1" }, { "_id" : "3", "boolean" : false, "b" : "yes", "c" : true, "newField" : "1", "a" : { "y" : [ "p", "q" ] } } ], "b" : [ { "d" : { "$numberInt" : "3" } } ], "c" : [ { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : "x" } }, { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberInt" : "1" } } }, { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberDouble" : "2.0" } } }, { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : true } }, { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } } ] }
(1 row)

EXPlAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$facet": { "a" : [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } } ],  "b" : [ { "$count": "d" } ], "c": [ { "$unwind": "$a.b" } ] } } ], "cursor": {} }');
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: bson_object_agg((COALESCE(bson_array_agg(bson_dollar_add_fields(facetsub_stage_1.document, '{ "newField" : "1", "a.y" : [ "p", "q" ] }'::bson), 'a'::text), '{ "a" : [  ] }'::bson)))
   CTE facet_base_0
     ->  Bitmap Heap Scan on helio_data.documents_3500 collection
           Output: collection.document
           Recheck Cond: (collection.shard_key_value = '3500'::bigint)
           ->  Bitmap Index Scan on _id_
                 Index Cond: (collection.shard_key_value = '3500'::bigint)
   ->  Append
         ->  Aggregate
               Output: COALESCE(bson_array_agg(bson_dollar_add_fields(facetsub_stage_1.document, '{ "newField" : "1", "a.y" : [ "p", "q" ] }'::bson), 'a'::text), '{ "a" : [  ] }'::bson)
               ->  CTE Scan on facet_base_0 facetsub_stage_1
                     Output: facetsub_stage_1.document
         ->  Aggregate
               Output: COALESCE(bson_array_agg((bson_repath_and_build('d'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson))), 'b'::text), '{ "b" : [  ] }'::bson)
               ->  Aggregate
                     Output: bson_repath_and_build('d'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson))
                     ->  CTE Scan on facet_base_0 facetsub_stage_2
         ->  Aggregate
               Output: COALESCE(bson_array_agg((bson_dollar_unwind(facetsub_stage_3.document, '$a.b'::text)), 'c'::text), '{ "c" : [  ] }'::bson)
               ->  ProjectSet
                     Output: bson_dollar_unwind(facetsub_stage_3.document, '$a.b'::text)
                     ->  CTE Scan on facet_base_0 facetsub_stage_3
                           Output: facetsub_stage_3.document
(24 rows)

-- facet with parent transform:
SELECT document FROM bson_aggregation_pipeline('db', 
'{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$unwind": "$a.b" }, { "$facet": { "a" : [ { "$unset": "_id" } ],  "b" : [ { "$count": "d" } ], "c": [ { "$replaceWith": { "f": "$_id" } } ] } } ], "cursor": {} }');
                                                                                                                                                                                                                                                            document                                                                                                                                                                                                                                                             

 { "a" : [ { "int" : { "$numberInt" : "10" }, "a" : { "b" : "x" } }, { "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberInt" : "1" } } }, { "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberDouble" : "2.0" } } }, { "int" : { "$numberInt" : "10" }, "a" : { "b" : true } }, { "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } } ], "b" : [ { "d" : { "$numberInt" : "5" } } ], "c" : [ { "f" : "1" }, { "f" : "1" }, { "f" : "1" }, { "f" : "1" }, { "f" : "2" } ] }
(1 row)

-- FIND
SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "filter": { "_id": { "$gt": "1" } }, "projection": { "a.b": 1 }, "sort": { "_id": 1 }, "skip": 1, "limit": 2 }');
    document     
-----------------
 { "_id" : "3" }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "filter": { "_id": { "$gt": "1" } }, "projection": { "a.b": 1 }, "sort": { "_id": 1 }, "skip": 1, "limit": 2 }');
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on "topQuery_stage_0"
   Output: "topQuery_stage_0".document
   ->  Limit
         Output: (bson_dollar_project_find(collection.document, '{ "a.b" : { "$numberInt" : "1" } }'::bson, '{ "_id" : { "$gt" : "1" } }'::bson)), (bson_orderby(collection.document, '{ "_id" : { "$numberInt" : "1" } }'::bson))
         ->  Sort
               Output: (bson_dollar_project_find(collection.document, '{ "a.b" : { "$numberInt" : "1" } }'::bson, '{ "_id" : { "$gt" : "1" } }'::bson)), (bson_orderby(collection.document, '{ "_id" : { "$numberInt" : "1" } }'::bson))
               Sort Key: (bson_orderby(collection.document, '{ "_id" : { "$numberInt" : "1" } }'::bson)) NULLS FIRST
               ->  Index Scan using _id_ on helio_data.documents_3500 collection
                     Output: bson_dollar_project_find(collection.document, '{ "a.b" : { "$numberInt" : "1" } }'::bson, '{ "_id" : { "$gt" : "1" } }'::bson), bson_orderby(collection.document, '{ "_id" : { "$numberInt" : "1" } }'::bson)
                     Index Cond: ((collection.shard_key_value = '3500'::bigint) AND (collection.object_id > '{ "" : "1" }'::bson))
                     Filter: (collection.document @> '{ "_id" : "1" }'::bson)
(11 rows)

SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "filter": { "_id": { "$gt": "1" } }, "projection": { "a.b": 1 }, "sort": { "_id": 1 }, "skip": 1, "limit": -2 }');
    document     
-----------------
 { "_id" : "3" }
(1 row)

-- count
SELECT document FROM bson_aggregation_count('db', '{ "count": "aggregation_pipeline" }');
                               document                               
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "3" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_count('db', '{ "count": "aggregation_pipeline", "query": { "_id": { "$gt": "1" } } }');
                               document                               
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "2" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_count('db', '{ "count": "non_existent_coll" }');
                               document                               
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "0" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM helio_api.count_query('db', '{ "count": "aggregation_pipeline", "query": { "_id": { "$gt": "1" } } }');
                               document                               
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "2" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM helio_api.count_query('db', '{ "count": "aggregation_pipeline" }');
                               document                               
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "3" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- EXPLAIN the counts
EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_count('db', '{ "count": "aggregation_pipeline" }');
                     QUERY PLAN                     
----------------------------------------------------
 Function Scan on coll_stats_aggregation collection
(1 row)

EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_count('db', '{ "count": "aggregation_pipeline", "query": { "_id": { "$gt": "1" } } }');
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using _id_ on documents_3500 collection
         Index Cond: ((shard_key_value = '3500'::bigint) AND (object_id > '{ "" : "1" }'::bson))
         Filter: (document @> '{ "_id" : "1" }'::bson)
(4 rows)

EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_count('db', '{ "count": "non_existent_coll" }');
                     QUERY PLAN                     
----------------------------------------------------
 Aggregate
   ->  Function Scan on empty_data_table collection
(2 rows)

-- distinct
SELECT document FROM bson_aggregation_distinct('db', '{ "distinct": "aggregation_pipeline", "key": "_id" }');
                               document                               
----------------------------------------------------------------------
 { "values" : [ "1", "2", "3" ], "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_distinct('db', '{ "distinct": "non_existent_coll", "key": "foo" }');
                        document                         
---------------------------------------------------------
 { "values" : [  ], "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM helio_api.distinct_query('db', '{ "distinct": "aggregation_pipeline", "key": "_id" }');
                               document                               
----------------------------------------------------------------------
 { "values" : [ "1", "2", "3" ], "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM helio_api.distinct_query('db', '{ "distinct": "non_existent_coll", "key": "foo" }');
                        document                         
---------------------------------------------------------
 { "values" : [  ], "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- Vector search with cosmosSearch
SELECT helio_api.insert_one('db', 'aggregation_pipeline', '{ "_id": 6, "a": "some sentence", "v": [3.0, 5.0, 1.1 ] }');
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'aggregation_pipeline', '{ "_id": 7, "a": "some other sentence", "v": [8.0, 5.0, 0.1 ] }');
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "foo_1", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 2, "similarity": "COS", "dimensions": 3 } } ] }', true);
ERROR:  function helio_api_catalog.bson_extract_vector(bson, text) does not exist
LINE 1: ... public.vector_cosine_ops) WITH (lists = 2) WHERE helio_api_...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
QUERY:  CREATE INDEX documents_rum_index_3501 ON helio_data.documents_3500 USING ivfflat(CAST(helio_api_catalog.bson_extract_vector(document, 'v'::text) AS public.vector(3)) public.vector_cosine_ops) WITH (lists = 2) WHERE helio_api_catalog.bson_extract_vector(document, 'v'::text) IS NOT NULL
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v" }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v" }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "filter": {"a": "some sentence"} }  } } ], "cursor": {} }');
ERROR:  $filter is not supported for vector search yet.
HINT:  vector pre-filter is disabled. Set helio_api.enableVectorPreFilter to true to enable vector pre filter.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "filter": "some sentence" }  } } ], "cursor": {} }');
ERROR:  $filter is not supported for vector search yet.
HINT:  vector pre-filter is disabled. Set helio_api.enableVectorPreFilter to true to enable vector pre filter.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "filter": {} }  } } ], "cursor": {} }');
ERROR:  $filter is not supported for vector search yet.
HINT:  vector pre-filter is disabled. Set helio_api.enableVectorPreFilter to true to enable vector pre filter.
-- search with nProbes
-- numLists <= data size, using data as centroids, to avoid randomized centroids generated by pgvector
ANALYZE;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 2 }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
COMMIT;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
COMMIT;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v" }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
COMMIT;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 10000000 }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": -5 }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": "5" }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
-- numLists > data size, pgvector will generate randomized centroids, using original vector data to query
CALL helio_api.drop_indexes('db', '{ "dropIndexes": "aggregation_pipeline", "index": "foo_1"}');
ERROR:  index not found with name [foo_1]
SELECT helio_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "foo_1", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 10000, "similarity": "COS", "dimensions": 3 } } ] }', true);
ERROR:  function helio_api_catalog.bson_extract_vector(bson, text) does not exist
LINE 1: ...lic.vector_cosine_ops) WITH (lists = 10000) WHERE helio_api_...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
QUERY:  CREATE INDEX documents_rum_index_3502 ON helio_data.documents_3500 USING ivfflat(CAST(helio_api_catalog.bson_extract_vector(document, 'v'::text) AS public.vector(3)) public.vector_cosine_ops) WITH (lists = 10000) WHERE helio_api_catalog.bson_extract_vector(document, 'v'::text) IS NOT NULL
ANALYZE;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 10000 }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
COMMIT;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 5.0, 1.1 ], "k": 2, "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
COMMIT;
SELECT helio_test_helpers.drop_primary_key('db','aggregation_pipeline');
 drop_primary_key 
------------------
 
(1 row)

BEGIN;
set local enable_seqscan to off;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v" }  } } ], "cursor": {} }');
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
-- Vector search with knnBeta
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 5.0, 1.1 ], "k": 1, "path": "v" }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v" }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "filter": {"a": "some sentence"} }  } } ], "cursor": {} }');
ERROR:  $filter is not supported for vector search yet.
HINT:  vector pre-filter is disabled. Set helio_api.enableVectorPreFilter to true to enable vector pre filter.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "filter": "some" }  } } ], "cursor": {} }');
ERROR:  $filter is not supported for vector search yet.
HINT:  vector pre-filter is disabled. Set helio_api.enableVectorPreFilter to true to enable vector pre filter.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 5.0, 1.1 ], "k": 1, "path": "v", "filter": {} }  } } ], "cursor": {} }');
ERROR:  $filter is not supported for vector search yet.
HINT:  vector pre-filter is disabled. Set helio_api.enableVectorPreFilter to true to enable vector pre filter.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "score": {"a": "some sentence"} }  } } ], "cursor": {} }');
ERROR:  $score is not supported for knnBeta queries.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "score": 100 }  } } ], "cursor": {} }');
ERROR:  $score must be a document value.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 5.0, 1.1 ], "k": 1, "path": "v", "score": {} }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "unknowType": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v" }  } } ], "cursor": {} }');
ERROR:  Unrecognized $search option: unknowType, should be one of: cosmosSearch, knnBeta.
-- non supported vector index type
SELECT helio_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_vector", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "idx_vector", "cosmosSearchOptions": { "kind": "vector-diskann", "similarity": "COS", "dimensions": 3 } } ] }');
ERROR:  Error in specification { "key" : { "v" : "cosmosSearch" }, "name" : "idx_vector", "cosmosSearchOptions" : { "kind" : "vector-diskann", "similarity" : "COS", "dimensions" : 3 } } :: caused by :: Invalid search index kind vector-diskann
SELECT helio_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_vector", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "idx_vector", "cosmosSearchOptions": { "kind": "vector-scann", "similarity": "COS", "dimensions": 3 } } ] }');
ERROR:  Error in specification { "key" : { "v" : "cosmosSearch" }, "name" : "idx_vector", "cosmosSearchOptions" : { "kind" : "vector-scann", "similarity" : "COS", "dimensions" : 3 } } :: caused by :: Invalid search index kind vector-scann
-- $lookup
SELECT helio_api.insert_one('db','agg_pipeline_orders',' { "_id" : 1, "item" : "almonds", "price" : 12, "quantity" : 2 }', NULL);
NOTICE:  creating collection
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','agg_pipeline_orders','{ "_id" : 2, "item" : "pecans", "price" : 20, "quantity" : 1 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','agg_pipeline_orders',' { "_id" : 3, "item" : "bread", "price" : 10, "quantity" : 5 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','agg_pipeline_orders',' { "_id" : 4, "item" : ["almonds", "bread", "pecans"], "price" : 10, "quantity" : 5 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','agg_pipeline_orders',' { "_id" : 5}', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','agg_pipeline_orders',' { "_id" : 6, "item" : {"a": "x", "b" : 1, "c" : [1, 2, 3]} }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','agg_pipeline_orders',' { "_id" : 7, "item" : [{"a": { "b" : 1}}, [1, 2, 3], 1, "x"] }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','agg_pipeline_inventory',' { "_id" : 11, "sku" : "almonds", "description": "product 1", "instock" : 120 }', NULL);
NOTICE:  creating collection
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','agg_pipeline_inventory',' { "_id" : 12, "sku" : "almonds", "description": "product 1", "instock" : 240 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','agg_pipeline_inventory','{ "_id" : 13, "sku" : "bread", "description": "product 2", "instock" : 80 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','agg_pipeline_inventory','{ "_id" : 14, "sku" : "cashews", "description": "product 3", "instock" : 60 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','agg_pipeline_inventory','{ "_id" : 15, "sku" : "pecans", "description": "product 4", "instock" : 70 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','agg_pipeline_inventory','{ "_id" : 16, "sku" : null, "description": "product 4", "instock" : 70 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','agg_pipeline_inventory','{ "_id" : 17, "sku" :  {"a": "x", "b" : 1, "c" : [1, 2, 3]}, "description": "complex object" }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','agg_pipeline_inventory','{ "_id" : 18, "sku" : [{"a": { "b" : 1}}, [1, 2, 3], 1, "x"], "description": "complex array" }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','agg_pipeline_inventory','{ "_id" : 19, "sku" : [{"a": { "b" : 1}}, [1, 2, 3], 1, "x"], "description": "complex array" }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "localField": "item", "foreignField": "sku" } } ], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                                document                                                                                                                                                                                                                                                                                                                                                 

 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, { "_id" : { "$numberInt" : "12" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "15" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "13" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, { "_id" : { "$numberInt" : "12" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" } }, { "_id" : { "$numberInt" : "13" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" } }, { "_id" : { "$numberInt" : "15" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "sku" : null, "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "17" }, "sku" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "description" : "complex object" } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "_id" : { "$numberInt" : "18" }, "sku" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "description" : "complex array" }, { "_id" : { "$numberInt" : "19" }, "sku" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "description" : "complex array" } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                           document                                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "localField": "item", "foreignField": "sku", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                           document                                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "efe" : { "$numberInt" : "2" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "4" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "efe" : { "$numberInt" : "2" } } ] }
(7 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "pipeline": [ { "$count": "efe" } ] } }, { "$sample": { "size": 3 } } ], "cursor": {} }');
                                                                                                                                     QUERY PLAN                                                                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on "topQuery_stage_0"
   Output: "topQuery_stage_0".document
   ->  Limit
         Output: agg_stage_1.document, (random())
         ->  Sort
               Output: agg_stage_1.document, (random())
               Sort Key: (random())
               ->  Subquery Scan on agg_stage_1
                     Output: agg_stage_1.document, random()
                     ->  Nested Loop Left Join
                           Output: helio_api_internal.bson_dollar_merge_documents(collection.document, (COALESCE(bson_array_agg((bson_repath_and_build('efe'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson))), 'matched_docs'::text), '{ "matched_docs" : [  ] }'::bson)))
                           ->  Bitmap Heap Scan on helio_data.documents_3501 collection
                                 Output: collection.shard_key_value, collection.object_id, collection.document, collection.creation_time
                                 Recheck Cond: (collection.shard_key_value = '3501'::bigint)
                                 ->  Bitmap Index Scan on _id_
                                       Index Cond: (collection.shard_key_value = '3501'::bigint)
                           ->  Materialize
                                 Output: (COALESCE(bson_array_agg((bson_repath_and_build('efe'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson))), 'matched_docs'::text), '{ "matched_docs" : [  ] }'::bson))
                                 ->  Aggregate
                                       Output: COALESCE(bson_array_agg((bson_repath_and_build('efe'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson))), 'matched_docs'::text), '{ "matched_docs" : [  ] }'::bson)
                                       ->  Aggregate
                                             Output: bson_repath_and_build('efe'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson))
                                             ->  Bitmap Heap Scan on helio_data.documents_3502 collection_0_1
                                                   Recheck Cond: (collection_0_1.shard_key_value = '3502'::bigint)
                                                   ->  Bitmap Index Scan on _id_
                                                         Index Cond: (collection_0_1.shard_key_value = '3502'::bigint)
(26 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "localField": "item", "foreignField": "sku", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                           QUERY PLAN                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: helio_api_internal.bson_dollar_merge_documents(collection.document, (SubPlan 1))
   ->  Bitmap Heap Scan on helio_data.documents_3501 collection
         Output: collection.shard_key_value, collection.object_id, collection.document, collection.creation_time
         Recheck Cond: (collection.shard_key_value = '3501'::bigint)
         ->  Bitmap Index Scan on _id_
               Index Cond: (collection.shard_key_value = '3501'::bigint)
   ->  Aggregate
         Output: COALESCE(bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::bson)
         ->  Bitmap Heap Scan on helio_data.documents_3502 collection_0_1
               Output: collection_0_1.shard_key_value, collection_0_1.object_id, collection_0_1.document, collection_0_1.creation_time
               Recheck Cond: (collection_0_1.shard_key_value = '3502'::bigint)
               Filter: helio_api_internal.bson_dollar_lookup_join_filter(collection_0_1.document, helio_api_internal.bson_dollar_lookup_extract_filter_expression(collection.document, '{ "sku" : "item" }'::bson), 'sku'::text)
               ->  Bitmap Index Scan on _id_
                     Index Cond: (collection_0_1.shard_key_value = '3502'::bigint)
   SubPlan 1
     ->  Aggregate
           Output: COALESCE(bson_array_agg((bson_repath_and_build('efe'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson))), 'matched_docs'::text), '{ "matched_docs" : [  ] }'::bson)
           ->  Aggregate
                 Output: bson_repath_and_build('efe'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson))
                 ->  Function Scan on helio_api_catalog.bson_lookup_unwind lookup_subpipeline_substage_0
                       Output: lookup_subpipeline_substage_0.lookup_unwind
                       Function Call: bson_lookup_unwind((COALESCE(bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::bson)), 'matched_docs'::text)
(23 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "coll_dne", "as": "matched_docs", "localField": "item", "foreignField": "sku", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                           document                                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "colldne", "pipeline": [], "as": "c" } } ], "cursor": {} }');
                                                                                                     document                                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "5" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "c" : [  ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "c" : [  ] }
(7 rows)

BEGIN;
set local citus.enable_local_execution to off;
SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "localField": "item", "foreignField": "sku" } } ], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                                document                                                                                                                                                                                                                                                                                                                                                 

 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, { "_id" : { "$numberInt" : "12" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "15" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "13" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, { "_id" : { "$numberInt" : "12" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" } }, { "_id" : { "$numberInt" : "13" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" } }, { "_id" : { "$numberInt" : "15" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "sku" : null, "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "17" }, "sku" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "description" : "complex object" } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "_id" : { "$numberInt" : "18" }, "sku" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "description" : "complex array" }, { "_id" : { "$numberInt" : "19" }, "sku" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "description" : "complex array" } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                           document                                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "localField": "item", "foreignField": "sku", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                           document                                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "efe" : { "$numberInt" : "2" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "4" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "efe" : { "$numberInt" : "2" } } ] }
(7 rows)

ROLLBACK;
SELECT helio_api.shard_collection('db', 'agg_pipeline_orders', '{ "_id": "hashed" }', false);
 shard_collection 
------------------
 
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "localField": "item", "foreignField": "sku" } } ], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                                document                                                                                                                                                                                                                                                                                                                                                 

 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, { "_id" : { "$numberInt" : "12" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "15" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "13" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, { "_id" : { "$numberInt" : "12" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" } }, { "_id" : { "$numberInt" : "13" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" } }, { "_id" : { "$numberInt" : "15" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "sku" : null, "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "17" }, "sku" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "description" : "complex object" } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "_id" : { "$numberInt" : "18" }, "sku" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "description" : "complex array" }, { "_id" : { "$numberInt" : "19" }, "sku" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "description" : "complex array" } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                           document                                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "localField": "item", "foreignField": "sku", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                           document                                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "efe" : { "$numberInt" : "2" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "4" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "efe" : { "$numberInt" : "2" } } ] }
(7 rows)

BEGIN;
set local citus.enable_local_execution to off;
SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "localField": "item", "foreignField": "sku" } } ], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                                document                                                                                                                                                                                                                                                                                                                                                 

 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, { "_id" : { "$numberInt" : "12" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "15" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "13" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, { "_id" : { "$numberInt" : "12" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" } }, { "_id" : { "$numberInt" : "13" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" } }, { "_id" : { "$numberInt" : "15" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "sku" : null, "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "17" }, "sku" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "description" : "complex object" } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "_id" : { "$numberInt" : "18" }, "sku" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "description" : "complex array" }, { "_id" : { "$numberInt" : "19" }, "sku" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "description" : "complex array" } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                           document                                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "localField": "item", "foreignField": "sku", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                           document                                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "efe" : { "$numberInt" : "2" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "4" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "efe" : { "$numberInt" : "2" } } ] }
(7 rows)

ROLLBACK;
SELECT helio_api.shard_collection('db', 'agg_pipeline_inventory', '{ "_id": "hashed" }', false);
 shard_collection 
------------------
 
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "localField": "item", "foreignField": "sku" } } ], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                                document                                                                                                                                                                                                                                                                                                                                                 

 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, { "_id" : { "$numberInt" : "12" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "_id" : { "$numberInt" : "15" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "13" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "11" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "120" } }, { "_id" : { "$numberInt" : "12" }, "sku" : "almonds", "description" : "product 1", "instock" : { "$numberInt" : "240" } }, { "_id" : { "$numberInt" : "13" }, "sku" : "bread", "description" : "product 2", "instock" : { "$numberInt" : "80" } }, { "_id" : { "$numberInt" : "15" }, "sku" : "pecans", "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "sku" : null, "description" : "product 4", "instock" : { "$numberInt" : "70" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "17" }, "sku" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "description" : "complex object" } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "_id" : { "$numberInt" : "18" }, "sku" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "description" : "complex array" }, { "_id" : { "$numberInt" : "19" }, "sku" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "description" : "complex array" } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                           document                                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "agg_pipeline_inventory", "as": "matched_docs", "localField": "item", "foreignField": "sku", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                           document                                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "efe" : { "$numberInt" : "2" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "4" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "efe" : { "$numberInt" : "2" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "coll_dne", "as": "matched_docs", "localField": "item", "foreignField": "sku", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                           document                                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_orders", "pipeline": [ { "$lookup": { "from": "colldne", "pipeline": [], "as": "c" } } ], "cursor": {} }');
                                                                                                     document                                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "item" : "almonds", "price" : { "$numberInt" : "12" }, "quantity" : { "$numberInt" : "2" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "2" }, "item" : "pecans", "price" : { "$numberInt" : "20" }, "quantity" : { "$numberInt" : "1" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "3" }, "item" : "bread", "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "4" }, "item" : [ "almonds", "bread", "pecans" ], "price" : { "$numberInt" : "10" }, "quantity" : { "$numberInt" : "5" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "5" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "6" }, "item" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "c" : [  ] }
 { "_id" : { "$numberInt" : "7" }, "item" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "c" : [  ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": 1, "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } } ], "cursor": {} }');
ERROR:  {aggregate: 1} is not valid for '$addFields'; a collection is required.
HINT:  {aggregate: 1} is not valid for '$addFields'; a collection is required.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": 1, "pipeline": [ { "$match": { "newField" : "1", "a.y": ["p", "q"] } } ], "cursor": {} }');
ERROR:  {aggregate: 1} is not valid for '$match'; a collection is required.
HINT:  {aggregate: 1} is not valid for '$match'; a collection is required.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": 1, "pipeline": [ { "$project": { "newField" : "1", "a.y": ["p", "q"] } } ], "cursor": {} }');
ERROR:  {aggregate: 1} is not valid for '$project'; a collection is required.
HINT:  {aggregate: 1} is not valid for '$project'; a collection is required.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": 1, "pipeline": [ { "$skip": 1 } ], "cursor": {} }');
ERROR:  {aggregate: 1} is not valid for '$skip'; a collection is required.
HINT:  {aggregate: 1} is not valid for '$skip'; a collection is required.
-- test sort behavior on sharded/unsharded
EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate" : "agg_pipeline_inventory", "pipeline" : [ { "$match" : { "$or" : [ { "_id" : { "$lt" : 9999.0 }, "some_other_field" : { "$ne" : 3.0 } }, { "this_predicate_matches_nothing" : true } ] } }, { "$sort" : { "_id" : -1.0 } }, { "$limit" : 1.0 }, { "$project" : { "_id" : 1.0, "b" : { "$round" : "$a" } } } ], "cursor" : {  }, "lsid" : { "id" : { "$binary" : { "base64": "VJmzOaS5R46C4aFkQzrFaQ==", "subType" : "04" } } }, "$db" : "test" }');
                                                                                                                      QUERY PLAN                                                                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on agg_stage_3
   ->  Limit
         ->  Sort
               Sort Key: (bson_orderby(collection.document, '{ "_id" : { "$numberDouble" : "-1.0" } }'::bson)) DESC NULLS LAST
               ->  Seq Scan on documents_3502 collection
                     Filter: (((document @< '{ "_id" : { "$numberDouble" : "9999.0" } }'::bson) AND (document @!= '{ "some_other_field" : { "$numberDouble" : "3.0" } }'::bson)) OR (document @= '{ "this_predicate_matches_nothing" : true }'::bson))
(6 rows)

EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate" : "aggregation_pipeline", "pipeline" : [ { "$match" : { "$or" : [ { "_id" : { "$lt" : 9999.0 }, "some_other_field" : { "$ne" : 3.0 } }, { "this_predicate_matches_nothing" : true } ] } }, { "$sort" : { "_id" : -1.0 } }, { "$limit" : 1.0 }, { "$project" : { "_id" : 1.0, "b" : { "$round" : "$a" } } } ], "cursor" : {  }, "lsid" : { "id" : { "$binary" : { "base64": "VJmzOaS5R46C4aFkQzrFaQ==", "subType" : "04" } } }, "$db" : "test" }');
                                                                                                                      QUERY PLAN                                                                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on agg_stage_3
   ->  Limit
         ->  Sort
               Sort Key: (bson_orderby(collection.document, '{ "_id" : { "$numberDouble" : "-1.0" } }'::bson)) DESC NULLS LAST
               ->  Seq Scan on documents_3500 collection
                     Filter: (((document @< '{ "_id" : { "$numberDouble" : "9999.0" } }'::bson) AND (document @!= '{ "some_other_field" : { "$numberDouble" : "3.0" } }'::bson)) OR (document @= '{ "this_predicate_matches_nothing" : true }'::bson))
(6 rows)

-- Vector search with empty vector field
SELECT helio_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_empty_vector", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "vectorIndex", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 5, "similarity": "COS", "dimensions": 3 } } ] }', true);
NOTICE:  creating collection
ERROR:  function helio_api_catalog.bson_extract_vector(bson, text) does not exist
LINE 1: ... public.vector_cosine_ops) WITH (lists = 5) WHERE helio_api_...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
QUERY:  CREATE INDEX documents_rum_index_3508 ON helio_data.documents_3503 USING ivfflat(CAST(helio_api_catalog.bson_extract_vector(document, 'v'::text) AS public.vector(3)) public.vector_cosine_ops) WITH (lists = 5) WHERE helio_api_catalog.bson_extract_vector(document, 'v'::text) IS NOT NULL
SELECT helio_api.insert_one('db', 'aggregation_pipeline_empty_vector', '{ "_id": 1, "a": "some sentence", "v": [1, 2, 3 ] }');
NOTICE:  creating collection
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'aggregation_pipeline_empty_vector', '{ "_id": 2, "a": "some other sentence", "v": [1, 2.0, 3 ] }');
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'aggregation_pipeline_empty_vector', '{ "_id": 3, "a": "some sentence" }');
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db', 'aggregation_pipeline_empty_vector', '{ "_id": 4, "a": "some other sentence", "v": [3, 2, 1 ] }');
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_empty_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "nProbes": 5 }  } }, { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
EXPLAIN (COSTS OFF)SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_empty_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "nProbes": 5 }  } }, { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
ANALYZE;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_empty_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "nProbes": 5 }  } }, { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
EXPLAIN (COSTS OFF)SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_empty_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "nProbes": 5 }  } }, { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
SELECT drop_collection('db','aggregation_pipeline_empty_vector');
 drop_collection 
-----------------
 t
(1 row)

-- $addFields nested usage
SELECT helio_api.insert_one('db','aggregation_pipeline','{ "_id": 100, "student": "Maya", "homework": [10, 5, 10], "quiz": [10, 8], "extraCredit": 0 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT helio_api.insert_one('db','aggregation_pipeline','{ "_id": 200, "student": "Ryan", "homework": [5, 6, 5], "quiz": [8, 8], "extraCredit": 8 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "extraCredit": { "$gte": 0 } } }, { "$addFields": { "totalHomework": { "$sum": "$homework" }, "totalQuiz": { "$sum": "$quiz" } }}, { "$addFields": { "totalScore": { "$add": [ "$totalHomework", "$totalQuiz", "$extraCredit" ]} }} ], "cursor": {} }');
                                                                                                                                                                                      document                                                                                                                                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "100" }, "student" : "Maya", "homework" : [ { "$numberInt" : "10" }, { "$numberInt" : "5" }, { "$numberInt" : "10" } ], "quiz" : [ { "$numberInt" : "10" }, { "$numberInt" : "8" } ], "extraCredit" : { "$numberInt" : "0" }, "totalHomework" : { "$numberInt" : "25" }, "totalQuiz" : { "$numberInt" : "18" }, "totalScore" : { "$numberInt" : "43" } }
 { "_id" : { "$numberInt" : "200" }, "student" : "Ryan", "homework" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "5" } ], "quiz" : [ { "$numberInt" : "8" }, { "$numberInt" : "8" } ], "extraCredit" : { "$numberInt" : "8" }, "totalHomework" : { "$numberInt" : "16" }, "totalQuiz" : { "$numberInt" : "16" }, "totalScore" : { "$numberInt" : "40" } }
(2 rows)

