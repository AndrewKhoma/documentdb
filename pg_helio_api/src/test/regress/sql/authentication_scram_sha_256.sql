SET search_path TO helio_api_catalog;
SET helio_api.next_collection_id TO 1800;
SET helio_api.next_collection_index_id TO 1800;


-- TEST SCRAM SHA-256 authentication support functions from extension
--   Test file to test the functions:
--     1. helio_api.scram_sha256_get_salt_and_iterations() and 
--     2. helio_api.authenticate_with_scram_sha256()
CREATE OR REPLACE FUNCTION test_helio_scram_sha256_dual_api(p_user_name text,
															  p_password text)
RETURNS text 
AS $$
DECLARE
    rol_pas            text; -- Role Password from pg_authid table
    iter_ext           text; -- iterations count extracted from shadow password
    salt_ext           text; -- salt extracted from shadow password
    salt_n_iter        text; -- SALT and iterations from scram_sha256_get_salt_and_iterations()
    salt_n_iter_formed text; -- json format text with SALT and iterations formed in this test.
    auth_result        helio_core.bson; -- Authentication result.
    cp_n_authmsg       text; -- Client Proof and Auth message from test helper function.
    auth_message       text; -- Auth Message generated by test suite
    client_proof       text;
    result             text;
    serv_sign          text; -- Server signature sent by extension
    serv_sign_gen      text; -- Generated server signature by Test suite.
    auth_result_t      text; -- Scram Authentication result in text type
BEGIN
    -- Get salt and Iterations from Postgres for the provided User name
    SELECT helio_api.scram_sha256_get_salt_and_iterations(p_user_name) into salt_n_iter;
    
    select rolpassword into rol_pas from pg_catalog.pg_authid where rolname = p_user_name;

	SELECT substring(rol_pas similar '%SCRAM-SHA-256$#"_+#":_+$_+:%' escape '#') into iter_ext;
	SELECT substring(rol_pas similar '%SCRAM-SHA-256$_+:#"_+#"$_+:%' escape '#') into salt_ext;
	
    salt_n_iter_formed := '{ "ok" : { "$numberInt" : "1" }, "iterations" : { "$numberInt" : "' 
                          || iter_ext || '" }, "salt" : "' || salt_ext || '" }';
	
	-- IF the salt and iterations got from scram_sha256_get_salt_and_iterations is 
	-- not not matching with the extracted ones from the shadow password then return false.
	IF salt_n_iter <> salt_n_iter_formed THEN
        RETURN 'SALT request result mismatch';
    END IF;

    SELECT helio_test_helpers.generate_auth_message_client_proof(p_user_name, p_password) into cp_n_authmsg;

    SELECT substring(cp_n_authmsg similar '%"AuthMessage" : "#"_+#"", "ClientProof"%' escape '#') into auth_message;
    SELECT substring(cp_n_authmsg similar '%"AuthMessage" : "_+", "ClientProof" : "#"_+#""%' escape '#') into client_proof;

    SELECT REPLACE(auth_message, '\"', '"') into auth_message;
    SELECT REPLACE(auth_message, '\\', '\') into auth_message;
    
    SELECT helio_api.authenticate_with_scram_sha256(p_user_name, auth_message, client_proof) into auth_result;

    result := auth_result @= '{"ok":1}';

    IF result = 'true' THEN
        SELECT auth_result into auth_result_t;
        SELECT substring(auth_result_t similar '%"ServerSignature" : "#"_+#""%' escape '#') into serv_sign;

        -- Validate Server Signature in auth_result
        --     ServerKey = HMAC(SaltedPassword, "Server Key")
        --     ServerSignature = HMAC(ServerKey, AuthMessage)
        --   This ServerSignature has to be compared against serv_sign (which is received from extension).
        --       If matched, then authentication is success.
        SELECT helio_test_helpers.generate_server_signature(p_user_name, p_password, auth_message) into serv_sign_gen;
        SELECT substring(serv_sign_gen similar '%"ServerSignature" : "#"_+#""%' escape '#') into serv_sign_gen;
              
        IF serv_sign <> serv_sign_gen THEN
            return 'false';
        END IF;
        
    END IF;

    RETURN result;
	
END;
$$ 
LANGUAGE plpgsql;

SET client_min_messages TO ERROR;
CREATE ROLE myuser4      WITH LOGIN PASSWORD 'mypasswrd4';
CREATE ROLE mYuSeR5      WITH LOGIN PASSWORD 'mypasswrd5';
CREATE ROLE "Myuser6"    WITH LOGIN PASSWORD 'Myuser6';
create role "Fi""roz"    with LOGIN PASSWORD 'firoz1';
create role "fi""r""oZ"  with LOGIN PASSWORD 'firoz2';
create role "fi""r""."   with LOGIN PASSWORD 'firoz3';
create role "fir"""      with LOGIN PASSWORD 'firoz4';
create role "firo"""""   with LOGIN PASSWORD 'firoz5';
create role "fi""""ro""" with LOGIN PASSWORD 'firoz6';
create role "firoz ev"   with LOGIN PASSWORD 'firoz7';
create role "Fi\troz"    with LOGIN PASSWORD 'firoz8';
RESET client_min_messages;

-- 1. CALL THE TEST FUNCTION with a valid user name
SELECT test_helio_scram_sha256_dual_api('myuser4', 'mypasswrd4');

-- 2. CALL THE TEST FUNCTION with a valid user name
SELECT test_helio_scram_sha256_dual_api('Myuser6', 'Myuser6');

-- 3. CALL scram_sha256_get_salt_and_iterations with null input parameter
SELECT helio_api.scram_sha256_get_salt_and_iterations(null);

-- 4. CALL scram_sha256_get_salt_and_iterations with empty input parameter
SELECT helio_api.scram_sha256_get_salt_and_iterations('');

-- 5. CALL scram_sha256_get_salt_and_iterations with non existent user name
SELECT helio_api.scram_sha256_get_salt_and_iterations('nonexistent');

-- 6. CALL scram_sha256_get_salt_and_iterations with non existent user name with a white space in it
SELECT helio_api.scram_sha256_get_salt_and_iterations('white space');

-- 7. CALL scram_sha256_get_salt_and_iterations with non existent quoted user name with a white space in it. Note that quoted user name is not supported by this API
SELECT helio_api.scram_sha256_get_salt_and_iterations('"white space"');

-- 8. CALL scram_sha256_get_salt_and_iterations with non existent user name which is of length more than 64
SELECT helio_api.scram_sha256_get_salt_and_iterations('abcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxy');

-- 9. FAIL CASE because username is given in lower case but was created with mixed case using double quotes.
SELECT helio_api.scram_sha256_get_salt_and_iterations('myuser6');

-- 10. FAIL CASE because username is given in upper case but was created with mixed case using double quotes.
SELECT helio_api.scram_sha256_get_salt_and_iterations('MYUSER6');

SET client_min_messages = LOG;

-- 10.1
SELECT test_helio_scram_sha256_dual_api('Fi"roz', 'firoz1');

-- 10.2
SELECT test_helio_scram_sha256_dual_api('fi"r"oZ', 'firoz2');

-- 10.3
SELECT test_helio_scram_sha256_dual_api('fi"r".', 'firoz3');

-- 10.4
SELECT test_helio_scram_sha256_dual_api('fir"', 'firoz4');

-- 10.5
SELECT test_helio_scram_sha256_dual_api('firo""', 'firoz5');

-- 10.6
SELECT test_helio_scram_sha256_dual_api('fi""ro"', 'firoz6');

-- 10.7
SELECT test_helio_scram_sha256_dual_api('firoz ev', 'firoz7');

-- 10.8
SELECT test_helio_scram_sha256_dual_api('Fi\troz', 'firoz8');

-- 10.9 Test for incorrect password
SELECT test_helio_scram_sha256_dual_api('Fi\troz', 'firoz88');

SET client_min_messages = NOTICE;

-- 11. Checking for case sensitiveness. FULL Lowercase. Real username is mYuSeR5. Expect true
SELECT test_helio_scram_sha256_dual_api('myuser5', 'mypasswrd5');

-- 12. Checking for case sensitiveness. FULL Uppercase. Real username is mYuSeR5. Expect false (because PG downcase when username is unquoted)
SELECT test_helio_scram_sha256_dual_api('MYUSER5', 'mypasswrd5');

-- 13. Checking for case sensitiveness. Original. Real username is mYuSeR5. Expect false (because PG downcase when username is unquoted)
SELECT test_helio_scram_sha256_dual_api('mYuSeR5', 'mypasswrd5');

-- 1. Call with User Name as NULL
SELECT helio_api.authenticate_with_scram_sha256(null, 'authmsg', 'client proof');

-- 2. Call with AUTH MESSAGE as NULL
SELECT helio_api.authenticate_with_scram_sha256('myuser4', null, 'client proof');

-- 3. Call with User Name, AUTH MESSAGE, CLIENT PROOF as NULL
SELECT helio_api.authenticate_with_scram_sha256(null, null, null);

-- 4. Empty user name
SELECT helio_api.authenticate_with_scram_sha256('', 'abc', 'defg');

-- 5. Non existent user name
SELECT helio_api.authenticate_with_scram_sha256('abc', 'abc', 'defgh');

-- 6. User name > 64
SELECT helio_api.authenticate_with_scram_sha256('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz', 'client proof');

-- 7. Incorrect auth message for a valid user
select helio_api.authenticate_with_scram_sha256('myuser4', 'authMsg1', 'clientProof123');

-- DROP THE USERS CREATED FOR THE TEST
DROP ROLE myuser4;
DROP ROLE mYuSeR5;
DROP ROLE "Myuser6";
DROP role "Fi""roz";
DROP role "fi""r""oZ";
DROP role "fi""r"".";
DROP role "fir"""      ;
DROP role "firo"""""   ;
DROP role "fi""""ro""" ;
DROP role "firoz ev";
DROP role "Fi\troz";

